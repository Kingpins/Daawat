from django.shortcuts import render, redirect
from django.views import View
from daawat.middlewares.auth import auth_middleware
from daawat.service.astra_service import *
from datetime import datetime, timedelta
from daawat.util.generate_pdf import *
from .menu import hotel_exists

class AllOrders(View):

    # allowing access for menu to customers, who are requesting for it.
    def post(self,request):
       customer_id = request.POST.get('customer_id')
       astra_service.update_customer_by_customer_id(customer_id)
       return redirect("allorders")
        
    # getting all the current orders available in orders table of database having hotel_id equals to current hotel_id,
    def get(self , request):
        data = {}
        customer_ids = []
        ordersList = []
        invoicesList = []
        foodIds = []
        customersList = []
        hotel_id = request.session["hotelid"]
        
        customers = astra_service.get_customer_by_hotel_id(hotel_id)
        for customer in customers:
            customer_ids.append(customer["customer_id"])
            customersList.append(customer)
        
        data["customers"] = customersList
        orders = astra_service.get_order(hotel_id,customer_ids)
        invoices = astra_service.get_invoice_by_customer_id(customer_ids)

        if len(customer_ids) == 1:
            for out in orders:
                foodIds.append(out["product"])
                ordersList.append(out)
            for out in invoices:
                invoicesList.append(out)
            foodIds = set(foodIds)
            products = astra_service.get_food_by_food_ids(foodIds)
            data["orders"] = ordersList
            data["invoices"] = invoicesList
            data["products"] = products
            return render(request , 'allorders.html'  , data)
            
        for out in orders:
            foodIds.append(out["product"])
            ordersList.append(out)

        for out in invoices:
            invoicesList.append(out)
        
        foodIds = set(foodIds)
        products = astra_service.get_food_by_food_ids(foodIds)
        data["orders"] = ordersList
        data["invoices"] = invoicesList
        data["products"] = products
        return render(request , 'allorders.html'  , data)

# decline the access for menu, if the customer is trying to access inappropriately.
def decline(request):
    if request.method == "GET":
        return redirect("allorders")
    if request.method == "POST":
        customer_id = request.POST.get('customer_id')
        astra_service.delete_customer(customer_id)
        return redirect("allorders")


def bill_paid(request):
    if request.method == "GET":
        return redirect("allorders")

    # if the bill is generated by customer, then 'Bill Paid' button will be displayed in allorders.html
    # by clicking which the following method will be executed
    # finally it will give you a pdf of bill.
    if request.method == "POST":
        ordersList = []
        data = {}
        customer_ids = []
        foodIds = []
        data = {}
        invoiceList = []
        customer_info_list = []

        hotel_id = request.session.get('hotelid')
        grand_total = request.POST.get('grand_total')
        customer_id = request.POST.get('customer_id')
        invoice_id = request.POST.get('invoice_id')
        time_of_invoice = request.POST.get('time_of_invoice')
        
        hotel_exists(data,hotel_id)
        customer_ids.append(customer_id)
        
        orders = astra_service.get_order(hotel_id,customer_ids)
        for out in orders:
            ordersList.append(out)
            foodIds.append(out["product"])
        
        foodIds = set(foodIds)
        products = astra_service.get_food_by_food_ids(foodIds)
        invoices = astra_service.get_invoice_by_invoice_id(str(invoice_id))
        customer_info = astra_service.get_customer_by_customer_id(customer_id)
        for c in customer_info:
            customer_info_list.append(c)
        for i in invoices:
            invoiceList.append(i)

        
        template = get_template('invoice.html')
        context = {
            "invoices": invoiceList,
            "invoice_id":invoice_id,
            "invoice_date":time_of_invoice,
            "data": data,
            "foods":products,
            "grand_total":grand_total,
            "customer":customer_info_list
        }
        astra_service.delete_customer(customer_id)
        html = template.render(context)
        pdf = render_to_pdf('invoice.html', context)
        if pdf:
            response = HttpResponse(pdf, content_type='application/pdf')
            filename = "Invoice_%s" %(invoice_id)
            content = "inline; filename='%s'" %(filename)
            download = request.GET.get("download")
            if download:
                content = "attachment; filename='%s'" %(filename)
            response['Content-Disposition'] = content
            render(request,"menu.html")
            redirect("allorders")
            return response
        return HttpResponse("Not found")

def order_status(request):
    if request.method == "GET":
        return redirect("allorders")
    if request.method == "POST":
        hotel_id = request.session["hotelid"]
        customer_id = request.POST.get('customer_id')
        order_id = request.POST.get('order_id')
        time_of_order = float(request.POST.get('time_of_order'))
        astra_service.update_order_status(hotel_id,customer_id,order_id,time_of_order)
        return redirect("allorders")